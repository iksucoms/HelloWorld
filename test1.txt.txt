인터랙티브 SQL과 임베디드 SQL에 대해 설명해 드리겠습니다. 이 둘은 모두 데이터베이스와 소통하기 위한 SQL이지만, 사용 방식과 목적이 크게 다릅니다. 각자의 특징과 구체적인 사용 예시를 살펴보겠습니다.

인터랙티브 SQL (Interactive SQL)

인터랙티브 SQL은 이름 그대로 사용자가 직접 SQL 명령어를 입력하고, 그 자리에서 즉시 결과를 얻는 방식의 SQL 활용을 의미합니다

예를 들어 저희가 지금 하고있는 데이터베이스 관리 시스템인 oraclesql이나 웹 기반의 sql 에디터 등을 사용해서 실시간으로 데이터베이스와 대화하는 겁니다.

목적으로는

수동 데이터 조작: 데이터를 직접 삽입, 업데이트, 삭제하는 경우.

데이터 조회 및 분석: 특정 데이터를 검색하거나 집계하여 현황을 파악하는 경우.

데이터베이스 관리: 테이블 생성/변경, 사용자 관리, 성능 모니터링 등 데이터베이스 자체를 관리하는 작업.

Create/ALTER

데이터베이스에 접근할 수 있는 사용자 계정을 생성하고, 각 계정에 특정 권한을 부여하거나 회수하여 보안을 관리합니다.

GRANT/REVOKE

쿼리 테스트 및 디버깅: 프로그램에 포함하기 전에 SQL 쿼리가 의도한 대로 작동하는지 확인하는 경우.







임베디드 SQL은 C, Java, Python, C# 등 일반적인 프로그래밍 언어 코드 안에 SQL 문을 직접 작성하여 포함시키는 방식을 의미합니다. SQL 문은 독립적으로 실행되는 것이 아니라,작성된 프로그램의 일부가 되어 프로그램이 실행될 때 함께 동작하며 데이터베이스와 상호작용합니다.

실제사례로는 1. 사용자 입력 기반 데이터 처리: 쿠팡 검색 기능
쿠팡 같은 온라인 쇼핑몰에서 상품을 검색할 때, 단순히 정해진 데이터만 보여주는 게 아니죠. 사용자가 어떤 키워드를 입력하느냐에 따라 다른 결과를 보여줍니다. 이럴 때 임베디드 SQL이 사용됩니다.

예시: 당신이 쿠팡 검색창에 "아이폰 케이스"라고 입력하고 엔터 키를 누릅니다.

당신이 입력한 "아이폰 케이스"라는 문자열은 웹 브라우저를 통해 쿠팡 서버의 프로그램으로 전달됩니다.

쿠팡 서버의 파이썬(Python) 또는 자바(Java)로 작성된 프로그램 코드 안에는 임베디드 SQL 쿼리가 준비되어 있습니다. 예를 들어, SELECT * FROM Products WHERE product_name LIKE %?%와 같은 형태죠.

프로그램은 당신이 입력한 "아이폰 케이스"라는 키워드를 SQL 쿼리의 플레이스홀더(?)에 안전하게 바인딩합니다. (%아이폰 케이스% 형태로 변환될 수 있습니다.)

바인딩된 SQL 쿼리가 데이터베이스로 전송되어 실행됩니다. 데이터베이스는 '아이폰 케이스'라는 키워드를 포함하는 모든 상품 정보를 찾아 반환합니다.

반환된 데이터는 다시 프로그램으로 전달되고, 프로그램은 이 데이터를 바탕으로 웹 페이지에 검색 결과를 예쁘게 정리하여 보여줍니다.

이처럼 사용자의 동적인 입력에 따라 실시간으로 데이터베이스에서 필요한 정보를 찾아와 보여줄 때 임베디드 SQL이 필수적입니다.







oracledb는 Oracle 데이터베이스와 상호작용할 수 있게 해주는 라이브러리입니다. 이 모듈을 통해 Oracle DB에 연결하고, 데이터를 조회할 수 있습니다.
dns=Data Source Name
192.168.119.119": 데이터베이스 서버의 IP 주소
"1521": Oracle의 기본 포트 번호
"dinkdb": 데이터베이스 서비스 이름
연결이 성공하면, 그 연결을 제어하고 데이터를 주고받을 수 있는 oracledb.Connection 타입의 객체를 생성합니다.
생성된 oracledb.Connection 객체를 conn이라는 변수에 할당합니다. 
 이 객체를 통해 데이터베이스와 통신할 수 있습니다.

Thin Mode는 python-oracledb 라이브러리의 핵심적인 기능 중 하나이자 가장 큰 장점입니다. 이름 그대로 "얇은" 모드라는 뜻을 가지고 있습니다.
Thick Mode 
클라이언트 
통로

이 '커서'라는 개념은 데이터베이스 안에서 실제로 SQL 명령(쿼리)을 실행하고 그 결과를 한 줄씩 가리키며 탐색할 수 있게 해주는 포인터 같은 것이에요.

식당으로 예를 들면 
이 주문서(커서)에 원하는 메뉴(SQL 쿼리)를 적고, 종업원(데이터베이스)에게 전달해서 음식을 받고(데이터 조회) 계산도 하는 거죠.








